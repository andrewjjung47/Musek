// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from packets.djinni

#import <Foundation/Foundation.h>

/**
 * @file
 * Enum represents all possible packet types.
 * The type of the packet tells you information about what data
 * is stored in 'values' field.
 * When you know the packet type, look at the corresponding enum for information
 * about data mapping (e.g.: Accelerometer enum, EEG enum, etc).
 */
typedef NS_ENUM(NSInteger, IXNMuseDataPacketType)
{
    /** 3-axis accelerometer data packet */
    IXNMuseDataPacketTypeAccelerometer,
    /**
     * Packet contains raw data from Muse EEG sensors. Data mapping in
     * this packet is the same as in quantization packet.
     */
    IXNMuseDataPacketTypeEeg,
    /**
     * Packet stands in for n dropped samples of the un-dropped type.
     * This packet is sent before accelerometer data packet.
     */
    IXNMuseDataPacketTypeDroppedAccelerometer,
    /**
     * Packet stands in for n dropped samples of the un-dropped type.
     * This packet is sent before EEG data packet.
     */
    IXNMuseDataPacketTypeDroppedEeg,
    /**
     * Packet contains information about signal quantization.
     * Each channel in this packet corresponds to same EEG channel.
     * Quantization data can be used to analyze how well the Muse headband was
     * "placed on head" and to get information about EEG signal quality.
     * Higher numbers are worse; 0 is no quantization, and 15 is maximum
     * quantization.
     *
     * These values are used under the hood to reconstruct the EEG data you see,
     * so you don't need to do anything with them yourself. Unless you're
     * interested in signal quality, you can and should ignore these packets.
     */
    IXNMuseDataPacketTypeQuantization,
    /** Muse headband battery data packet. */
    IXNMuseDataPacketTypeBattery,
    /** Packet contains raw data from Muse DRL and REF sensors. */
    IXNMuseDataPacketTypeDrlRef,
    /** Absolute alpha band powers for each channel. */
    IXNMuseDataPacketTypeAlphaAbsolute,
    /** Absolute beta band powers for each channel. */
    IXNMuseDataPacketTypeBetaAbsolute,
    /** Absolute delta band powers for each channel. */
    IXNMuseDataPacketTypeDeltaAbsolute,
    /** Absolute theta band powers for each channel. */
    IXNMuseDataPacketTypeThetaAbsolute,
    /** Absolute gamma band powers for each channel. */
    IXNMuseDataPacketTypeGammaAbsolute,
    /**
     * Relative alpha band powers for each channel.
     * Values in this packet are in range [0; 1].
     */
    IXNMuseDataPacketTypeAlphaRelative,
    /**
     * Relative beta band powers for each channel.
     * Values in this packet are in range [0; 1].
     */
    IXNMuseDataPacketTypeBetaRelative,
    /**
     * Relative delta band powers for each channel.
     * Values in this packet are in range [0; 1].
     */
    IXNMuseDataPacketTypeDeltaRelative,
    /**
     * Relative band powers for each channel.
     * Values in this packet are in range [0; 1].
     */
    IXNMuseDataPacketTypeThetaRelative,
    /**
     * Relative band powers for each channel.
     * Values in this packet are in range [0; 1].
     */
    IXNMuseDataPacketTypeGammaRelative,
    /** Alpha band power scores for each channel. */
    IXNMuseDataPacketTypeAlphaScore,
    /** Beta band power scores for each channel. */
    IXNMuseDataPacketTypeBetaScore,
    /** Delta band power scores for each channel. */
    IXNMuseDataPacketTypeDeltaScore,
    /** Theta band power scores for each channel. */
    IXNMuseDataPacketTypeThetaScore,
    /** Gamma band power scores for each channel. */
    IXNMuseDataPacketTypeGammaScore,
    /**
     * Horseshoe values represent quality of signal
     * for each sensor (know as horseshoe indicator).
     */
    IXNMuseDataPacketTypeHorseshoe,
    /** Artifacts packet type will be sent */
    IXNMuseDataPacketTypeArtifacts,
    /**
     * Packet contains only one value, which is a mellow score,
     * calculated by Muse Elements algorithm. Approximately 30 seconds are
     * required before algorithm will start producing correct values.
     * Range [0; 1]. This packet is experimental.
     */
    IXNMuseDataPacketTypeMellow,
    /**
     * Packet contains only one value, which is a concentration score,
     * calculated by Muse Elements algorithm. Approximately 30 seconds are
     * required before algorithm will start producing correct values.
     * Range [0; 1]. This packet is experimental.
     */
    IXNMuseDataPacketTypeConcentration,
    /** The total number of possible data packet types */
    IXNMuseDataPacketTypeTotal,
    IXNMuseDataPacketTypeCount,
};
